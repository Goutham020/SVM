import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA

# âœ… Load your dataset
file_path = r"C:\Users\anany\Downloads\archive (10)\breast-cancer.csv"
df = pd.read_csv(file_path)

# âœ… Drop unnecessary columns (adjust based on actual dataset)
if 'id' in df.columns:
    df.drop(columns=['id'], inplace=True)
if 'Unnamed: 32' in df.columns:
    df.drop(columns=['Unnamed: 32'], inplace=True)

# âœ… Encode target if needed
if df['diagnosis'].dtype == 'object':
    df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

# âœ… Features and target
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# âœ… Standardization
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# âœ… Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# âœ… Train linear kernel SVM
svm_linear = SVC(kernel='linear', C=1)
svm_linear.fit(X_train, y_train)
y_pred_linear = svm_linear.predict(X_test)

# âœ… Train RBF kernel SVM
svm_rbf = SVC(kernel='rbf', C=1, gamma='scale')
svm_rbf.fit(X_train, y_train)
y_pred_rbf = svm_rbf.predict(X_test)

# âœ… Evaluation
print("ðŸ“Š Linear Kernel Report:\n", classification_report(y_test, y_pred_linear))
print("ðŸ“Š RBF Kernel Report:\n", classification_report(y_test, y_pred_rbf))

# âœ… Cross-validation
scores = cross_val_score(svm_rbf, X_scaled, y, cv=5)
print("âœ… RBF Kernel Cross-Validation Accuracy: %.2f%%" % (scores.mean() * 100))

# âœ… Hyperparameter Tuning
param_grid = {'C': [0.1, 1, 10], 'gamma': [0.001, 0.01, 0.1, 1]}
grid = GridSearchCV(SVC(kernel='rbf'), param_grid, refit=True, verbose=1, cv=5)
grid.fit(X_train, y_train)
print("ðŸŽ¯ Best Parameters:", grid.best_params_)

# âœ… PCA for 2D visualization
pca = PCA(n_components=2)
X_2D = pca.fit_transform(X_scaled)
X_train_2D, X_test_2D, y_train_2D, y_test_2D = train_test_split(X_2D, y, test_size=0.2, random_state=42)

model_2D = SVC(kernel='rbf', C=1, gamma=0.01)
model_2D.fit(X_train_2D, y_train_2D)

# âœ… Decision boundary plot
def plot_decision_boundary(X, y, model):
    h = 0.02
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.contourf(xx, yy, Z, alpha=0.6, cmap=plt.cm.coolwarm)
    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', cmap=plt.cm.coolwarm)
    plt.xlabel("PCA Component 1")
    plt.ylabel("PCA Component 2")
    plt.title("SVM Decision Boundary (2D PCA)")
    plt.show()

plot_decision_boundary(X_test_2D, y_test_2D, model_2D)
